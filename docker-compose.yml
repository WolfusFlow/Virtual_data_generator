version: '3'
services:

  generator0:
    build: ./generator
    depends_on: 
      - rabbitmq
    links: 
      - rabbitmq
    restart: always
    environment: 
      - SERVER_NAME=First_Server
      - AMQP_URL=rabbitmq
      - ROUTING_KEY=dataqueue

  generator1:
    build: ./generator
    depends_on: 
      - rabbitmq
    links: 
      - rabbitmq
    restart: always
    environment: 
      - SERVER_NAME=Second_Server
      - AMQP_URL=rabbitmq
      - ROUTING_KEY=dataqueue

  generator2:
    build: ./generator
    depends_on: 
      - rabbitmq
    links: 
      - rabbitmq
    restart: always
    environment: 
      - SERVER_NAME=Third_Server
      - AMQP_URL=rabbitmq
      - ROUTING_KEY=dataqueue

    
  orchestrator:
    build: ./orchestrator
    depends_on: 
      - rabbitmq
      - postgres
    links:
      - rabbitmq
      - postgres
    restart: always
    environment: 
      - AMQP_URL=rabbitmq
      - ROUTING_KEY=dataqueue
      - POSTGRESQL=postgres
      - DATABASE=data_db
      - DATABASE_PORT=5432
      # - DB_USER=postgres_user
      - DB_USER=data_db_user
      - DB_PASSWORD=password
      - TABLE_NAME=core_virtualdatatable

      
  backend:
    build: ./web/backend
    command: >
      bash -c "python manage.py makemigrations core 
      && python manage.py migrate
      && python manage.py runserver 0.0.0.0:8000"
      # python manage.py inspectdb virtual_data_table managed=True > /core/models.py  For needs to get data from legacy db
      # && python manage.py createsuperuser username=root password=password email=root@root.root
    # command: bash -c "python manage.py migrate"
    # command: bash -c "python manage.py createsuperuser --user $SUPER_ADMIN --password $SUPER_ADMIN_PASSWORD" 
    # command: bash -c "python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    restart: always
    links:
      - postgres
    depends_on: 
      - postgres
    environment: 
      - DATA_DB=data_db
      - DATA_DB_USER=data_db_user
      - DATA_DB_USER_PASSWORD=password
      - POSTGRESQL=postgres
      - DATABASE_PORT=5432
      # - SUPER_ADMIN=root
      # - SUPER_ADMIN_PASSWORD=password

  
  # frontend:


  rabbitmq:
    image: rabbitmq
    restart: always


  postgres:
    build: ./database
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment: 
      - DATA_DB_USER=data_db_user
      - DATA_DB_USER_PASSWORD=password
      - DATA_DB=data_db
      - POSTGRES_USER=postgres_user


volumes:
  postgres_data: